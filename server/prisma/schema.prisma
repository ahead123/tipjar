generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admins {
  admin_id     Int      @id @default(autoincrement())
  user_id      Int?
  access_level String
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  users        users?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_user_id")
}

model follows {
  follow_id                        Int      @id @default(autoincrement())
  follower_id                      Int
  followed_id                      Int
  follow_date                      DateTime @default(now()) @db.Timestamptz(6)
  users_follows_follower_idTousers users    @relation("follows_follower_idTousers", fields: [follower_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_follower")
  users_follows_followed_idTousers users    @relation("follows_followed_idTousers", fields: [followed_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tipee")
}

model reviews {
  review_id                      Int      @id @default(autoincrement())
  tipper_id                      Int
  tipee_id                       Int
  review_text                    String
  review_date                    DateTime @default(now()) @db.Timestamptz(6)
  users_reviews_tipee_idTousers  users    @relation("reviews_tipee_idTousers", fields: [tipee_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_review_tipee")
  users_reviews_tipper_idTousers users    @relation("reviews_tipper_idTousers", fields: [tipper_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_review_tipper")
}

model transactions {
  transaction_id                      Int      @id @default(autoincrement())
  tipper_id                           Int
  tipee_id                            Int
  amount                              Int
  transaction_date                    DateTime @default(now()) @db.Timestamptz(6)
  users_transactions_tipee_idTousers  users    @relation("transactions_tipee_idTousers", fields: [tipee_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tipee")
  users_transactions_tipper_idTousers users    @relation("transactions_tipper_idTousers", fields: [tipper_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tipper")
}

model user_profile {
  profile_id    Int      @id @default(autoincrement())
  user_id       Int?
  bio           String
  profile_image String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model users {
  user_id                                    Int            @id @default(autoincrement())
  first_name                                 String         @db.VarChar(50)
  last_name                                  String         @db.VarChar(50)
  username                                   String         @unique @db.VarChar(50)
  password                                   String         @db.VarChar(255)
  email                                      String         @unique @db.VarChar(355)
  role                                       String         @db.VarChar(50)
  created_at                                 DateTime       @default(now()) @db.Timestamptz(6)
  admins                                     admins[]
  follows_follows_follower_idTousers         follows[]      @relation("follows_follower_idTousers")
  follows_follows_followed_idTousers         follows[]      @relation("follows_followed_idTousers")
  reviews_reviews_tipee_idTousers            reviews[]      @relation("reviews_tipee_idTousers")
  reviews_reviews_tipper_idTousers           reviews[]      @relation("reviews_tipper_idTousers")
  transactions_transactions_tipee_idTousers  transactions[] @relation("transactions_tipee_idTousers")
  transactions_transactions_tipper_idTousers transactions[] @relation("transactions_tipper_idTousers")
  user_profile                               user_profile[]
}
